// https://leetcode.com/problems/continuous-subarray-sum/

struct Solution {}
use std::collections::HashMap;
impl Solution {
    pub fn check_subarray_sum(nums: Vec<i32>, k: i32) -> bool {
        let mut cumsum = 0;
        let mut modulo = 0;
        // First seen
        let mut seen_modulos: HashMap<i32, i32> = HashMap::with_capacity(nums.len());

        seen_modulos.insert(0, -1);

        for (i, n) in nums.iter().enumerate() {
            cumsum += n;
            if k != 0 {
                modulo = cumsum.rem_euclid(k);
            } else {
                modulo = cumsum;
            }

            match seen_modulos.get(&modulo) {
                Some(&x) => {
                    if x < (i as i32 - 1) {
                        return true;
                    }
                }
                None => {
                    seen_modulos.insert(modulo, i as i32);
                }
            }
        }
        false
    }

    pub fn check_subarray_sum_n2(nums: Vec<i32>, k: i32) -> bool {
        let n = nums.len();
        let mut arr = Vec::with_capacity(Solution::trinum(n));

        for (i, val) in nums.iter().enumerate() {
            let tri = Solution::trinum(i);
            arr.push(*val);
            for j in 0..i {
                // println!("{}, {}", i, j);
                let newval = val + arr[j + tri - i];

                if (newval == 0) {
                    return true;
                }
                if (k != 0) && (newval % k == 0) && (newval >= k) {
                    return true;
                }
                arr.push(newval);
            }
        }
        false
    }

    fn trinum(n: usize) -> usize {
        (n * (n + 1)) / 2
    }
}

fn main() {
    println!("Hello, world!");
}

#[cfg(test)]
mod tests {
    // Note this useful idiom: importing names from outer (for mod tests) scope.
    use super::*;

    #[test]
    fn test_trinum() {
        assert_eq!(Solution::trinum(5), 15);
    }

    #[test]
    fn test_actual() {
        assert_eq!(Solution::check_subarray_sum(vec![23, 2, 4, 6, 7], 6), true);
    }
    #[test]
    fn test_actual2() {
        assert_eq!(Solution::check_subarray_sum(vec![23, 2, 6, 4, 7], 6), true);
    }
    #[test]
    fn test_actual3() {
        assert_eq!(Solution::check_subarray_sum(vec![23, 2, 6, 4, 7], 0), false);
    }
    #[test]
    fn test_actual4() {
        assert_eq!(Solution::check_subarray_sum(vec![0, 0], 0), true);
    }
    #[test]
    fn test_actual5() {
        assert_eq!(Solution::check_subarray_sum(vec![0; 6], 1), true);
    }
    #[test]
    fn test_actual6() {
        assert_eq!(Solution::check_subarray_sum(vec![23, 2, 4, 6, 7], -6), true);
    }
    #[test]
    fn test_actual7() {
        assert_eq!(Solution::check_subarray_sum(vec![0], 0), false);
    }
    #[test]
    fn test_actual8() {
        assert_eq!(Solution::check_subarray_sum(vec![1, 0], 2), false);
    }
    #[test]
    fn test_actual9() {
        assert_eq!(Solution::check_subarray_sum(vec![0], -1), false);
    }
    #[test]
    fn test_actual12() {
        assert_eq!(Solution::check_subarray_sum(vec![2, -1, -1], 0), true);
    }
    #[test]
    fn test_actual14() {
        assert_eq!(Solution::check_subarray_sum(vec![2, -1, -1], 5), true);
    }
    #[test]
    fn test_actual13() {
        assert_eq!(Solution::check_subarray_sum(vec![0, 0, 0], 7), true);
    }
    #[test]
    fn test_actual11() {
        assert_eq!(Solution::check_subarray_sum(vec![0, 0], -1), true);
    }
    #[test]
    fn test_actual10() {
        assert_eq!(Solution::check_subarray_sum(vec![1, 2, 12], 6), false);
    }
    #[test]
    fn test_actual15() {
        assert_eq!(Solution::check_subarray_sum(vec![0, 1, 0], 0), false);
    }
    #[test]
    fn test_actual16() {
        assert_eq!(
            Solution::check_subarray_sum(vec![1000000000], 1000000000),
            false
        );
    }
    #[test]
    fn test_actual17() {
        assert_eq!(
            Solution::check_subarray_sum(
                vec![
                    358, 432, 465, 409, 331, 226, 256, 387, 35, 468, 313, 153, 139, 326, 161, 451,
                    450, 241, 213, 26, 449, 185, 522, 389, 192, 348, 14, 370, 433, 4, 34, 360, 80,
                    446, 520, 429, 246, 524, 439, 165, 333, 444, 447, 218, 357, 191, 86, 236, 338,
                    212, 121, 340, 119, 246, 467, 22, 520, 140, 452, 429, 275, 344, 345, 190, 516,
                    205, 231, 104, 140, 469, 15, 393, 322, 399, 164, 437, 392, 54, 59, 300, 8, 463,
                    264, 242, 224, 480, 372, 96, 270, 425, 453, 524, 434, 381, 204, 242, 10, 311,
                    187, 460, 456, 293, 199, 146, 476, 42, 500, 130, 420, 521, 79, 56, 453, 421,
                    497, 315, 442, 282, 23, 428, 239, 218, 460, 42, 263, 240, 129, 526, 214, 287,
                    457, 97, 315, 74, 240, 357, 311, 359, 464, 427, 478, 452, 266, 327, 129, 172,
                    282, 25, 345, 172, 325, 70, 38, 198, 182, 244, 54, 211, 309, 519, 367, 244,
                    411, 310, 410, 132, 19, 175, 446, 6, 416, 449, 98, 328, 490, 339, 107, 517,
                    196, 162, 285, 484, 250, 52, 483, 115, 468, 187, 387, 229, 213, 380, 184, 189,
                    481, 93, 420, 400, 263, 70, 221, 147, 314, 23, 405, 189, 428, 122, 14, 263,
                    170, 103, 328, 469, 399, 449, 187, 493, 164, 283, 387, 166, 260, 271, 393, 347,
                    93, 15, 69, 183, 422, 346, 49, 1, 389, 240, 516, 23, 90, 134, 414, 226, 67,
                    309, 274, 328, 497, 180, 405, 187, 165, 202, 355, 261, 312, 334, 213, 31, 280,
                    8, 317, 168, 127, 124, 483, 452, 133, 160, 66, 319, 76, 333, 94, 55, 199, 492,
                    242, 165, 51, 286, 290, 444, 371, 471, 29, 216, 362, 156, 343, 366, 262, 240,
                    403, 220, 65, 306, 228, 477, 237, 340, 217, 121, 255, 278, 511, 124, 235, 268,
                    160, 23, 279, 406, 431, 410, 431, 211, 319, 116, 264, 476, 495, 244, 480, 299,
                    399, 20, 513, 361, 120, 286, 198, 31, 256, 475, 442, 223, 277, 179, 379, 48,
                    387, 235, 55, 32, 480, 167, 353, 59, 499, 44, 220, 392, 254, 293, 345, 481,
                    183, 361, 492, 286, 245, 254, 356, 350, 240, 217, 71, 337, 190, 519, 279, 354,
                    218, 242, 487, 304, 35, 165, 425, 76, 40, 318, 160, 341, 269, 233, 40, 344,
                    276, 347, 298, 30, 63, 275, 235, 339, 50, 263, 119, 344, 95, 184, 192, 230,
                    460, 314, 432, 122, 58, 161, 318, 51, 63, 47, 382, 301, 143, 350, 7, 48, 240,
                    325, 114, 306, 437, 467, 230, 438, 235, 284, 306, 108, 509, 245, 30, 413, 147,
                    403, 19, 302, 1, 366, 249, 116, 107, 303, 91, 146, 385, 127, 91, 135, 500, 26,
                    512, 278, 272, 519, 432, 230, 448, 474, 115, 406, 264, 170, 59, 331, 294, 160,
                    390, 194, 56, 398, 287, 520, 412, 194, 346, 396, 503, 523, 473, 157, 139, 308,
                    214, 189, 476, 405, 2, 297, 301, 511, 474, 357, 520, 365, 169, 471, 198, 132,
                    76, 392, 62, 48, 466, 118, 181, 118, 472, 472, 46, 47, 243, 149, 289, 462, 206,
                    9, 149, 240, 370, 489, 129, 250, 217, 381, 133, 340, 344, 68, 310, 179, 119,
                    397, 348, 292, 358, 288, 337, 176, 231, 135, 10, 515, 188, 303, 437, 436, 473,
                    392, 306, 236, 296, 92, 241, 342, 193, 312, 470, 73, 437, 222, 391, 401, 490,
                    305, 174, 15, 11, 369, 113, 502, 26, 341, 257, 409, 516, 138, 493, 134, 91,
                    430, 162, 131, 328, 198, 85, 285, 118, 307, 49, 472, 406, 41, 64, 34, 209, 479,
                    228, 438, 306, 292, 275, 488, 515, 473, 189, 372, 19, 165, 438, 127, 69, 408,
                    409, 28, 517, 493, 120, 68, 199, 305, 457, 192, 352, 139, 341, 40, 287, 38,
                    220, 69, 418, 186, 522, 96, 301, 17, 359, 473, 99, 4, 152, 88, 316, 41, 379,
                    136, 242, 370, 365, 8, 501, 200, 182, 465, 135, 183, 307, 261, 95, 374, 40,
                    447, 501, 26, 457, 88, 252, 113, 117, 32, 148, 298, 202, 220, 6, 107, 116, 55,
                    433, 99, 490, 397, 177, 302, 73, 282, 147, 20, 288, 229, 257, 209, 491, 221,
                    355, 243, 271, 148, 22, 211, 366, 68, 270, 318, 403, 25, 14, 261, 500, 61, 460,
                    72, 259, 285, 185, 335, 194, 185, 495, 270, 132, 159, 444, 78, 269, 169, 447,
                    304, 296, 110, 364, 321, 320, 303, 168, 20, 32, 166, 170, 292, 418, 61, 438,
                    411, 51, 64, 189, 480, 225, 496, 411, 501, 498, 18, 299, 109, 227, 210, 195,
                    264, 369, 499, 480, 124, 457, 317, 47, 151, 53, 94, 20, 344, 525, 116, 307, 51,
                    120, 20, 368, 379, 118, 381, 154, 325, 403, 120, 263, 61, 475, 296, 25, 251,
                    377, 459, 465, 120, 408, 57, 226, 218, 500, 61, 179, 219, 492, 487, 493, 500,
                    410, 19, 453, 351, 341, 407, 191, 368, 240, 422, 2, 463, 321, 9, 445, 374, 471,
                    248, 306, 9, 180, 38, 40, 249, 287, 267, 385, 29, 266, 100, 214, 242, 285, 97,
                    272, 206, 90, 95, 11, 68, 223, 185, 376, 358, 427, 395, 146, 32, 375, 423, 465,
                    17, 191, 293, 166, 83, 507, 51, 16, 316, 122, 169, 147, 414, 223, 60, 166, 354,
                    420, 14, 15, 53, 355, 383, 166, 97, 457, 472, 55, 35, 391, 94, 523, 168, 79,
                    92, 177, 2, 149, 198, 224, 512, 264, 298, 253, 383, 463, 343, 281, 504, 206,
                    271, 270, 177, 381, 329, 452, 4, 92, 41, 418, 209, 312, 162, 283, 395, 489,
                    215, 128, 278, 493, 150, 315, 133, 11, 202, 33, 181, 302, 301, 319, 26, 342,
                    430, 182, 196, 519, 502, 484, 395, 69, 308, 306, 23, 3, 409, 149, 153, 486,
                    333, 466, 485, 156, 204, 419, 252, 445, 51, 28, 515, 297, 465, 9, 418, 85, 467,
                    488, 187, 453, 375, 212, 106, 442, 237, 400, 198, 325, 134, 425, 499, 511, 324,
                    55, 233, 127, 427, 316, 112
                ],
                732193917
            ),
            false
        );
    }
}
